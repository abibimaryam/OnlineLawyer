import asyncio
import logging
import aiosqlite
import datetime
#from config import TOKEN 
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.enums import ParseMode
from aiogram.types import KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery # ReplyKeyboardMarkup 
from aiogram.utils.keyboard import InlineKeyboardBuilder #ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
# from aiogram.types import ReplyKeyboardRemove
from aiogram.types import BotCommandScopeChat

import os
from dotenv import load_dotenv

load_dotenv()

class UserRegistrationStates(StatesGroup):
    first_name = State()
    second_name = State()
    patronymic = State()
    phone = State()
    email = State()
    
class LawyerRegistrationStates(StatesGroup):
    first_name = State()
    second_name = State()
    patronymic = State()
    specialization = State()
    phone = State()
    email = State()

user_lawyer =  InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', callback_data='user_register'), InlineKeyboardButton(text='–Æ—Ä–∏—Å—Ç', callback_data='lawyer_register')]
    ]
)

class YourStates(StatesGroup):
    waiting_for_question = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —é—Ä–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
class AnsweringStates(StatesGroup):
    waiting_for_answer = State()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token= os.getenv('LAWYER_BOT_TOKEN'))
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(storage=MemoryStorage())

# –ö–æ–º–∞–Ω–¥—ã
async def set_personal_commands(bot: Bot, user_id: int):
    async with aiosqlite.connect("telegram_data_base.db") as db:
        user = await db.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        is_user = await user.fetchone()
        lawyer = await db.execute("SELECT id FROM lawyers WHERE id = ?", (user_id,))
        is_lawyer = await lawyer.fetchone()

    if is_user:
        commands = [
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            types.BotCommand(command="ask", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
            types.BotCommand(command="lawinfo", description="–ü—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞"),
            types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        ]
    elif is_lawyer:
        commands = [
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            types.BotCommand(command="takequestion", description="–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å"),
            types.BotCommand(command="lawinfo", description="–ü—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞"),
            types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        ]
    else:
        commands = [
            types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            types.BotCommand(command="registr", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
            types.BotCommand(command="lawinfo", description="–ü—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞"),
            types.BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
            types.BotCommand(command="whyinfo", description="–ó–∞—á–µ–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ")
        ]

    await bot.set_my_commands(commands, scope=BotCommandScopeChat(chat_id=user_id))
    
@dp.message(Command("start"))
async def start(message: types.Message, bot: Bot):
    await message.answer(
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
    "–≠—Ç–æ –±–æ—Ç <b><i>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å</i></b>. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ —é—Ä–∏—Å—Ç—É.",
    parse_mode=ParseMode.HTML
)
    await set_personal_commands(bot, message.from_user.id)

@dp.message(Command('help'))
async def help_message(message: types.Message):
    async with aiosqlite.connect("telegram_data_base.db") as db:
        user = await db.execute("SELECT id FROM users WHERE id = ?", (message.user_id,))
        is_user = await user.fetchone()
        lawyer = await db.execute("SELECT id FROM lawyers WHERE id = ?", (message.user_id,))
        is_lawyer = await lawyer.fetchone()

    if is_user:
        text = """"üìå –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
                    "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                    "/ask ‚Äî –∑–∞–¥–∞—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å\n"
                    "/lawinfo ‚Äî —Å—Ç–∞—Ç—å–∏ –æ –ø—Ä–∞–≤–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞\n"
                    "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏\n\n"
                    –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º!
                    """
        await message.answer(text)
    elif is_lawyer:
        text = """""üìå –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —é—Ä–∏—Å—Ç–∞:\n\n"
                    "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                    "/takequestion ‚Äî –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "/lawinfo ‚Äî —Å—Ç–∞—Ç—å–∏ –æ –ø—Ä–∞–≤–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞\n"
                    "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏\n\n"
                    –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º!
                    """
        await message.answer(text)
    else:
        text = """"üìå –ö–æ–º–∞–Ω–¥—ã:\n\n"
                    "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                    "/registr ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —é—Ä–∏—Å—Ç–∞\n"
                    "/lawinfo ‚Äî —Å—Ç–∞—Ç—å–∏ –æ –ø—Ä–∞–≤–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞\n"
                    "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏\n"
                    "/whyinfo ‚Äî –∑–∞—á–µ–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ"\n\n
                    –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º!
                    """
        await message.answer(text)

# =========================  –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨  =========================== #
@dp.message(UserRegistrationStates.second_name)
async def get_second_name(message: types.Message, state: FSMContext):
    await state.update_data(second_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(UserRegistrationStates.first_name)

@dp.message(UserRegistrationStates.first_name)
async def get_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(UserRegistrationStates.patronymic)

@dp.message(UserRegistrationStates.patronymic)
async def get_patronymic(message: types.Message, state: FSMContext):
    await state.update_data(patronymic=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(UserRegistrationStates.phone)

@dp.message(UserRegistrationStates.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    await state.set_state(UserRegistrationStates.email)

@dp.message(UserRegistrationStates.email)
async def get_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    data = await state.get_data()

    telegram_id = message.from_user.id
    date = datetime.date.today()

    async with aiosqlite.connect("telegram_data_base.db") as db:
        cursor = await db.execute("SELECT id FROM users WHERE id = ?", (telegram_id,))
        if await cursor.fetchone() is None:
          await db.execute("INSERT INTO users (id, username, question_ask, created_at) VALUES (?, ?, ?, ?)", 
                     (telegram_id, message.from_user.username, False, date))
          await db.execute("""
            INSERT INTO user_profile (user_id, first_name, second_name, patronymic, phone, email)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            telegram_id,
            data["first_name"],
            data["second_name"],
            data["patronymic"],
            data["phone"],
            data["email"]
        ))
        await db.commit()

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞—â–∏—â–µ–Ω—ã, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É \start –∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!")  
    await state.set_state(YourStates.waiting_for_question)   
             
    await state.clear()
      
@dp.callback_query(F.data == 'user_register')
async def question_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(UserRegistrationStates.second_name)

# =========================  –Æ–†–ò–°–¢  =========================== #
@dp.message(LawyerRegistrationStates.second_name)
async def lawyer_second_name(message: types.Message, state: FSMContext):
    await state.update_data(second_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(LawyerRegistrationStates.first_name)

@dp.message(LawyerRegistrationStates.first_name)
async def lawyer_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(LawyerRegistrationStates.patronymic)

@dp.message(LawyerRegistrationStates.patronymic)
async def lawyer_patronymic(message: types.Message, state: FSMContext):
    await state.update_data(patronymic=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:")
    await state.set_state(LawyerRegistrationStates.specialization)

@dp.message(LawyerRegistrationStates.specialization)
async def lawyer_specialization(message: types.Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(LawyerRegistrationStates.phone)

@dp.message(LawyerRegistrationStates.phone)
async def lawyer_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    await state.set_state(LawyerRegistrationStates.email)

@dp.message(LawyerRegistrationStates.email)
async def lawyer_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    data = await state.get_data()
    lawyer_id = message.from_user.id
    date = datetime.date.today()

    async with aiosqlite.connect("telegram_data_base.db") as db:
        cursor = await db.execute("SELECT id FROM lawyers WHERE id = ?", (lawyer_id,))
        if await cursor.fetchone() is None:
            await db.execute("""
                INSERT INTO lawyers (id, username, active, available_for_new_questions, created_at)
                VALUES (?, ?, ?, ?, ?)
            """, (lawyer_id, message.from_user.username, True, True, date))

            await db.execute("""
                INSERT INTO lawyer_profile (lawyer_id, first_name, second_name, patronymic, specialization, phone, email)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                lawyer_id,
                data["first_name"],
                data["second_name"],
                data["patronymic"],
                data["specialization"],
                data["phone"],
                data["email"]
            ))
            await db.commit()

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞—â–∏—â–µ–Ω—ã, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É \start –∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!")
    await state.clear()

@dp.callback_query(F.data == 'lawyer_register')
async def question_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞.")
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(LawyerRegistrationStates.second_name)

@dp.message(Command('registr'))
async def ask_command(message: types.Message, state: FSMContext):
    async with aiosqlite.connect('telegram_data_base.db') as db:
        cursor = await db.execute('SELECT * FROM users WHERE id = ?', (message.from_user.id,))
        result = await cursor.fetchone()

        if result is None:
            await message.answer("–¢–∞–∫ –∫–∞–∫ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è!\n", reply_markup=user_lawyer)
    
@dp.message(Command('whyinfo'))
async def whyinfo_command(message: types.Message):
    await message.answer(
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è:\n"
        "‚Ä¢ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏;\n"
        "‚Ä¢ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —é—Ä–∏—Å—Ç–∞;\n"
        "‚Ä¢ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
        "–ú—ã —Ö—Ä–∞–Ω–∏–º –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º."
    )


@dp.message(Command('lawinfo'))
async def lawinfo(message:types.Message):
    await message.answer(text="–ü–µ—Ä–µ–π–¥—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ –ø—Ä–∞–≤–∞—Ö —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω:\n\n"
             "üîó https://gk-usbekistan.de/ru/2023/11/13/–ø—Ä–∞–≤–∞-—á–µ–ª–æ–≤–µ–∫–∞-–≤-–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π-–∫–æ–Ω—Å—Ç–∏—Ç/")
    
@dp.message(Command('ask'))
async def ask_command(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id

    async with aiosqlite.connect('telegram_data_base.db') as db:
        cursor = await db.execute('SELECT id FROM users WHERE id = ?', (telegram_id,))
        result = await cursor.fetchone()

    if result:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:")
        await state.set_state(YourStates.waiting_for_question)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /registr.")

@dp.message(YourStates.waiting_for_question)
async def process_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    question_text = message.text
    
    async with aiosqlite.connect("telegram_data_base.db") as db:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
        await db.execute(
            "INSERT INTO questions (user_id, question_text, status) VALUES (?, ?, ?)",
            (user_id, question_text, '–æ–∂–∏–¥–∞–µ—Ç')
        )
        await db.commit()
        
        # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —é—Ä–∏—Å—Ç–∞
        cursor = await db.execute("""
            SELECT id FROM lawyers 
            WHERE available_for_new_questions = TRUE AND active = TRUE 
            LIMIT 1
        """)
        lawyer = await cursor.fetchone()
        
        if lawyer:
            lawyer_id = lawyer[0]
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é—Ä–∏—Å—Ç—É
            await bot.send_message(
                lawyer_id,
                "üîî –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å! \n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /takequestion, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –µ–≥–æ –≤ —Ä–∞–±–æ—Ç—É."
            )
            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–≤–æ–±–æ–¥–Ω–æ–º—É —é—Ä–∏—Å—Ç—É.")
        else:
            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —é—Ä–∏—Å—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, –æ–Ω –∑–∞–π–º–µ—Ç—Å—è –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.")
            
    await state.clear()

@dp.message(Command("takequestion"))
async def take_question(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–∏–ª–∏ state: FSMContext
    lawyer_id = message.from_user.id

    async with aiosqlite.connect("telegram_data_base.db") as db:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —é—Ä–∏—Å—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        cursor = await db.execute("SELECT id FROM lawyers WHERE id = ?", (lawyer_id,))
        if not await cursor.fetchone():
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —é—Ä–∏—Å—Ç.")
            return

        # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π –æ–∂–∏–¥–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        cursor = await db.execute("""
            SELECT id, user_id, question_text FROM questions 
            WHERE status IN ('–Ω–æ–≤—ã–π','–æ–∂–∏–¥–∞–µ—Ç') 
            ORDER BY created_at 
            LIMIT 1
        """)
        question = await cursor.fetchone()

        if not question:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.")
            return

        question_id, user_id, question_text = question

        # –ù–∞–∑–Ω–∞—á–∏–º –≤–æ–ø—Ä–æ—Å —é—Ä–∏—Å—Ç—É –∏ –æ–±–Ω–æ–≤–∏–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        await db.execute("""
            UPDATE questions 
            SET status = '–≤ —Ä–∞–±–æ—Ç–µ', assigned_lawyer_id = ? 
            WHERE id = ?
        """, (lawyer_id, question_id))

        # –ü–æ–º–µ—Ç–∏–º —é—Ä–∏—Å—Ç–∞ –∫–∞–∫ –∑–∞–Ω—è—Ç–æ–≥–æ
        await db.execute("""
            UPDATE lawyers 
            SET available_for_new_questions = FALSE 
            WHERE id = ?
        """, (lawyer_id,))
        await db.commit()

        await message.answer(f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–ø—Ä–æ—Å #{question_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                             f"‚ùì **–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:**\n{question_text}\n\n"
                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", parse_mode=ParseMode.MARKDOWN)
        await state.update_data(question_id=question_id, user_id=user_id)
        await state.set_state(AnsweringStates.waiting_for_answer)

@dp.message(AnsweringStates.waiting_for_answer)
async def process_answer(message: types.Message, state: FSMContext):
    lawyer_id = message.from_user.id
    answer_text = message.text
    
    data = await state.get_data()
    question_id = data.get("question_id")
    user_id = data.get("user_id")

    if not all([question_id, user_id]):
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    async with aiosqlite.connect("telegram_data_base.db") as db:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
        await db.execute(
            """INSERT INTO answers (question_id, lawyer_id, user_id, question_text) 
               VALUES (?, ?, ?, ?)""",
            (question_id, lawyer_id, user_id, answer_text)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ "–∑–∞–≤–µ—Ä—à—ë–Ω"
        await db.execute("UPDATE questions SET status = '–∑–∞–≤–µ—Ä—à—ë–Ω' WHERE id = ?", (question_id,))
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —é—Ä–∏—Å—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        await db.execute("UPDATE lawyers SET available_for_new_questions = TRUE WHERE id = ?", (lawyer_id,))
        
        await db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(
            user_id,
            f"‚öñÔ∏è **–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —é—Ä–∏—Å—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å #{question_id}:**\n\n{answer_text}",
            parse_mode=ParseMode.MARKDOWN
        )
        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

    await state.clear()


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    async with aiosqlite.connect('telegram_data_base.db') as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                username VARCHAR(100),
                question_ask BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_profile (
                user_id BIGINT PRIMARY KEY,
                first_name VARCHAR(15),
                second_name VARCHAR(15),
                patronymic VARCHAR(15),
                phone VARCHAR(20),
                email VARCHAR(100),
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            )
        """)
        await db.execute("""
           CREATE TABLE IF NOT EXISTS lawyers (
                id BIGINT PRIMARY KEY,
                username VARCHAR(100),
                active BOOLEAN DEFAULT TRUE,
                available_for_new_questions BOOLEAN DEFAULT TRUE, -- —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —é—Ä–∏—Å—Ç
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS lawyer_profile (
                lawyer_id BIGINT PRIMARY KEY,
                first_name VARCHAR(15),
                second_name VARCHAR(15),
                patronymic VARCHAR(15),
                specialization VARCHAR(255),
                phone VARCHAR(20),
                email VARCHAR(100),
                FOREIGN KEY (lawyer_id) REFERENCES lawyers(id) ON DELETE CASCADE
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS questions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id BIGINT NOT NULL,
                question_text TEXT NOT NULL,
                status TEXT DEFAULT '–Ω–æ–≤—ã–π', -- –Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–æ–≤—ã–π, –≤ —Ä–∞–±–æ—Ç–µ, –∑–∞–≤–µ—Ä—à—ë–Ω
                assigned_lawyer_id BIGINT DEFAULT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (assigned_lawyer_id) REFERENCES lawyers(id) ON DELETE SET NULL
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS answers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER NOT NULL,
                lawyer_id BIGINT,
                user_id BIGINT,
                valuation_service INT NOT NULL DEFAULT 0,
                question_text TEXT NOT NULL,
                start_chat TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                end_chat TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                link_document VARCHAR(255),
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                FOREIGN KEY (lawyer_id) REFERENCES lawyers(id) ON DELETE CASCADE,
                FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
            )
        """)
        
        await db.commit()

    # dp.message.register(process_question, StateFilter(YourStates.waiting_for_question))
    await dp.start_polling(bot)
        
    
if __name__ == "__main__":
    asyncio.run(main())
